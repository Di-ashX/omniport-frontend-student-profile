From cc4aa61f6abdf58e092db88c2b42cb8822ed29fe Mon Sep 17 00:00:00 2001
From: Ajayneethikannan <ajaykarate001@gmail.com>
Date: Sat, 2 Feb 2019 00:36:37 +0530
Subject: [PATCH] add changes

---
 faculty_profile                               |   1 +
 src/App.js                                    |   6 +-
 src/components/appMenu.js                     |  87 ++++++
 src/components/bookList.js                    | 118 ++++++++-
 src/components/genericFormMaker.js            | 249 ++++++++++++++++++
 src/components/input_fields/boolean-field.js  |  19 ++
 src/components/input_fields/choice-field.js   |  31 +++
 src/components/input_fields/date-field.js     |  28 ++
 src/components/input_fields/decimal-field.js  |  29 ++
 src/components/input_fields/email-field.js    |  29 ++
 src/components/input_fields/field.js          |  18 ++
 src/components/input_fields/fileField.js      |  34 +++
 src/components/input_fields/index.js          | 147 +++++++++++
 src/components/input_fields/integer-field.js  |  30 +++
 src/components/input_fields/no-field.js       |  24 ++
 src/components/input_fields/read-field.js     |  11 +
 src/components/input_fields/text-field.js     |  25 ++
 src/components/input_fields/textarea-field.js |  29 ++
 src/components/input_fields/year-field.js     |  24 ++
 src/components/jobForm.js                     |   9 +-
 src/components/profile.js                     |   6 +-
 student_profile                               |   1 +
 22 files changed, 927 insertions(+), 28 deletions(-)
 create mode 160000 faculty_profile
 create mode 100644 src/components/appMenu.js
 create mode 100644 src/components/genericFormMaker.js
 create mode 100644 src/components/input_fields/boolean-field.js
 create mode 100644 src/components/input_fields/choice-field.js
 create mode 100644 src/components/input_fields/date-field.js
 create mode 100644 src/components/input_fields/decimal-field.js
 create mode 100644 src/components/input_fields/email-field.js
 create mode 100644 src/components/input_fields/field.js
 create mode 100644 src/components/input_fields/fileField.js
 create mode 100644 src/components/input_fields/index.js
 create mode 100644 src/components/input_fields/integer-field.js
 create mode 100644 src/components/input_fields/no-field.js
 create mode 100644 src/components/input_fields/read-field.js
 create mode 100644 src/components/input_fields/text-field.js
 create mode 100644 src/components/input_fields/textarea-field.js
 create mode 100644 src/components/input_fields/year-field.js
 create mode 160000 student_profile

diff --git a/faculty_profile b/faculty_profile
new file mode 160000
index 0000000..511ab9d
--- /dev/null
+++ b/faculty_profile
@@ -0,0 +1 @@
+Subproject commit 511ab9d43f87ba16d81b612e16bec74967cc47bc
diff --git a/src/App.js b/src/App.js
index 7426c0f..5c746e2 100644
--- a/src/App.js
+++ b/src/App.js
@@ -37,7 +37,7 @@ const creators = [
   }
 ];
 
-class App extends Component {
+export class App extends Component {
   constructor(props) {
     super(props);
     this.state = {
@@ -76,7 +76,8 @@ class App extends Component {
       axios
         .get("/api/student_profile/profile/")
         .then(response => {
-          this.setState({ theme: response.data[0].theme });
+          console.log(response.data);
+          if(response.data[0])this.setState({ theme: response.data[0].theme });
         })
         .catch(error => {
           console.log(error);
@@ -114,7 +115,6 @@ class App extends Component {
           />
           <Menu.Item
             color={theme || "blue"}
-            fitted="horizontally"
             name="Achievements"
             active={activeItem === "Achievements"}
             onClick={(e, target) => {
diff --git a/src/components/appMenu.js b/src/components/appMenu.js
new file mode 100644
index 0000000..bc541ea
--- /dev/null
+++ b/src/components/appMenu.js
@@ -0,0 +1,87 @@
+const appMenu = (
+  <div style={{ zIndex: "5", position: "sticky", top: 0, backgroundColor: "white" }}>
+    <Menu pointing secondary size="small" fluid icon="labeled" borderless stackable widths={8}>
+      <Menu.Item
+        color={theme || "blue"}
+        name="Interests"
+        active={activeItem === "Interests"}
+        onClick={(e, target) => {
+          this.handleItemClick;
+          this.setState({ activeItem: "Interests" });
+          this.scroll("interest");
+        }}
+      />
+      <Menu.Item
+        color={theme || "blue"}
+        fitted="horizontally"
+        name="Achievements"
+        active={activeItem === "Achievements"}
+        onClick={(e, target) => {
+          this.handleItemClick;
+          this.setState({ activeItem: "Achievements" });
+          this.scroll("achievement");
+        }}
+      />
+      <Menu.Item
+        color={theme || "blue"}
+        name="Experience"
+        active={activeItem === "Internships"}
+        onClick={(e, target) => {
+          this.handleItemClick;
+          this.setState({ activeItem: "Internships" });
+          this.scroll("internship");
+        }}
+      />
+      <Menu.Item
+        color={theme || "blue"}
+        name="Projects"
+        active={activeItem === "Projects"}
+        onClick={(e, target) => {
+          this.handleItemClick;
+          this.setState({ activeItem: "Projects" });
+          this.scroll("project");
+        }}
+      />
+      <Menu.Item
+        color={theme || "blue"}
+        name="Skills"
+        active={activeItem === "Skills"}
+        onClick={(e, target) => {
+          this.handleItemClick;
+          this.setState({ activeItem: "Skills" });
+          this.scroll("skill");
+        }}
+      />
+      <Menu.Item
+        color={theme || "blue"}
+        name="Publications"
+        active={activeItem === "Publications"}
+        onClick={(e, target) => {
+          this.handleItemClick;
+          this.setState({ activeItem: "Publications" });
+          this.scroll("book");
+        }}
+      />
+      <Menu.Item
+        color={theme}
+        name="Education"
+        active={activeItem === "Education"}
+        onClick={(e, target) => {
+          this.handleItemClick;
+          this.setState({ activeItem: "Education" });
+          this.scroll("currentEducation");
+        }}
+      />
+      <Menu.Item
+        color={theme}
+        name="References"
+        active={activeItem === "References"}
+        onClick={(e, target) => {
+          this.handleItemClick;
+          this.setState({ activeItem: "References" });
+          this.scroll("referee");
+        }}
+      />
+    </Menu>
+  </div>
+);
diff --git a/src/components/bookList.js b/src/components/bookList.js
index 4f6c018..0ad2033 100644
--- a/src/components/bookList.js
+++ b/src/components/bookList.js
@@ -1,6 +1,5 @@
 import React from "react";
 import { Book } from "./book";
-import { BookForm } from "./bookForm";
 import { Dimmer, Icon, Segment, Popup, Header } from "semantic-ui-react";
 import { Link } from "react-router-dom";
 import axios from "axios";
@@ -9,7 +8,107 @@ import inline from "formula_one/src/css/inline.css";
 import { initial } from "./bookForm";
 import { DragAndDropBox } from "./dragAndDropBox";
 import { ComponentTransition } from "./transition";
+import genericFormMaker from "./genericFormMaker";
+const bookSpec = {
+  fields:[ {
+  
+      name: "title",
+      type: "input_field",
+      const_props: {
+        name: "title",
+        key:"Title",
+        placeholder: "Enter the title of the book",
+        label: "Title",
+        required: true
+      },
+      user_props: ["handleChange"]
+    },
+    {
+      name: "authors",
+      type: "input_field",
+      const_props: {
+        name: "authors",
+        key:"Author",
+        placeholder: "Enter the authors of the book",
+        label:"Authors",
+        required:true
+      },
+      user_props: ["handleChange"]
+    },
+    {
+      name: "publisher",
+      type: "input_field",
+      const_props: {
+        name: "publisher",
+        key: "Publisher",
+        placeholder: "Enter the publisher of the book",
+        label: "Publisher",
+        required: true
+      },
+      user_props:["handleChange"]
+    },
+    {
+      name: "year",
+      type: "year_field",
+      const_props: {
+        name: "year",
+        key: "year",
+        placeholder: "Enter the year of writing the book",
+        label: "Year",
+        required: false
+      },
+      user_props:["handleChange"]
+    }
+  ],  
+  group_fields: [{
+    widths:"equal",
+    fields: [
+      {
+        name: "pages",
+        type: "input_field",
+        const_props: {
+          name: "pages",
+          key: "Pages",
+          placeholder: "Number of pages",
+          label: "Pages",
+          required: false
+        },
+        user_props:["handleChange"]
+      },
+      {
+        name: "volumes",
+        type: "input_field",
+        const_props: {
+          name: "volumes",
+          key: "Volumes",
+          placeholder: "Number of volumes",
+          label: "Volumes",
+          required: false
+        },
+        user_props:["handleChange"]
+      }
+    ]
+  }],
 
+  initial: {
+    id: -1,
+    title: "",
+    authors: "",
+    publisher: "",
+    year: "",
+    pages: "",
+    volumes: "",
+    contribution: "",
+    editors: "",
+    isbnCode: "",
+    priority: 1,
+    visibility: true
+  },
+  url: "book",
+  name:"Book"
+};
+console.log(Book);
+const BookForm = genericFormMaker(bookSpec);
 export class BookList extends React.Component {
   constructor(props) {
     super(props);
@@ -89,6 +188,7 @@ export class BookList extends React.Component {
 
   render() {
     const { active, update, formData, data, rearrange } = this.state;
+    console.log(active);
     let { theme } = this.props;
     if (theme == "zero") theme = null;
     console.log(theme);
@@ -98,9 +198,7 @@ export class BookList extends React.Component {
     let children;
     if (data != "") {
       children = data.map(data => {
-        return (
-          <Book data={data} key={data.id} manageData={this.manageData} rearrange={this.props.handle != undefined} />
-        );
+        return <Book data={data} key={data.id} manageData={this.manageData} rearrange={this.props.handle != undefined} />;
       });
     }
     return (
@@ -116,9 +214,7 @@ export class BookList extends React.Component {
                 <Icon color="grey" name="add" circular onClick={handleShow} />
               </div>
             )}
-            {this.props.handle != undefined ? (
-              <span style={{ color: "grey", textAlign: "right" }}>{this.state.empty}</span>
-            ) : null}
+            {this.props.handle != undefined ? <span style={{ color: "grey", textAlign: "right" }}>{this.state.empty}</span> : null}
           </div>
 
           <Dimmer active={active} page>
@@ -132,13 +228,7 @@ export class BookList extends React.Component {
             />
           </Dimmer>
           <Dimmer active={rearrange} page>
-            <DragAndDropBox
-              data={data}
-              modelName="Book"
-              element={Book}
-              handleUpdate={handleUpdate}
-              handleDragHide={this.handleDragHide}
-            />
+            <DragAndDropBox data={data} modelName="Book" element={Book} handleUpdate={handleUpdate} handleDragHide={this.handleDragHide} />
           </Dimmer>
           {data == "" ? null : <Segment.Group> {children}</Segment.Group>}
         </Segment>
diff --git a/src/components/genericFormMaker.js b/src/components/genericFormMaker.js
new file mode 100644
index 0000000..33b5bd9
--- /dev/null
+++ b/src/components/genericFormMaker.js
@@ -0,0 +1,249 @@
+import React from "react";
+import moment from "moment";
+import { Form, Input, Button, Icon, Checkbox, Segment, Confirm } from "semantic-ui-react";
+import { getCookie } from "formula_one";
+import axios from "axios";
+import style from "../styles.css";
+import { DateInput } from "semantic-ui-calendar-react";
+import { ErrorTransition } from "./transition";
+import BooleanField from "./input_fields/boolean-field";
+import ChoiceField from "./input_fields/choice-field";
+import DateField from "./input_fields/date-field";
+import EmailField from "./input_fields/email-field";
+import IntegerField from "./input_fields/integer-field";
+import ReadField from "./input_fields/read-field";
+import TextField from "./input_fields/text-field";
+import TextAreaField from "./input_fields/textarea-field";
+import YearField from "./input_fields/year-field";
+
+const FieldMap = {
+  boolean_field: BooleanField,
+  choice_field: ChoiceField,
+  date_field: DateField,
+  email_field: EmailField,
+  integer_field: IntegerField,
+  read_field: ReadField,
+  input_field: TextField,
+  text_area_field: TextAreaField,
+  year_field: YearField
+};
+
+export default function genericFormMaker(info) {
+  let { initial, name, url } = info;
+  class Generic extends React.Component {
+    constructor(props) {
+      super(props);
+      this.state = {
+        data: props.formData,
+        fileData: props.fileData || -1 , //-1 in case of no file input fields present
+        update: props.update,
+        open: false,
+        errors:[]
+      };
+    }
+    makeForm = info => {
+      let formElements = [];
+      let fields = info.fields;
+      for (let index in fields) {
+        let field = fields[index];
+        //loop through each field
+
+        let props = {};
+        let properties = field.user_props;
+        for (let index in properties) {
+          //loop through each prop
+          console.log(properties[index]);
+          props[properties[index]] = this[properties[index]];
+        }
+        props["value"] = this.state.data[field.name];
+        //combine user_props and const_props
+
+        props = Object.assign(props, field.const_props);
+
+        //create the JSX element with the props and push it to the form array
+        let f = FieldMap[field.type];
+        console.log(props);
+        formElements.push(React.createElement(f, props));
+      }
+
+
+
+
+      let group_fields = info.group_fields;
+      for(let i in group_fields)
+      {
+        let group = group_fields[i];
+        let fields = group.fields;
+        let groupElements = [];
+        for (let index in fields) {
+          let field = fields[index];
+          //loop through each field
+  
+          let props = {};
+          let properties = field.user_props;
+          for (let index in properties) {
+            //loop through each prop
+            console.log(properties[index]);
+            props[properties[index]] = this[properties[index]];
+          }
+          props["value"] = this.state.data[field.name];
+          //combine user_props and const_props
+  
+          props = Object.assign(props, field.const_props);
+  
+          //create the JSX element with the props and push it to the form array
+          let f = FieldMap[field.type];
+          console.log(props);
+          groupElements.push(React.createElement(f, props));
+        }
+        formElements.push(
+          <Form.Group widths={group.widths}>{groupElements}</Form.Group>
+        )
+      }
+      return formElements;
+    };
+
+    handleFile = (event, name) => {
+      let link = name + "Link";
+      this.setState({
+        fileData:{
+          ...this.state.fileData,
+          [name]: event.target.files[0],
+          [link]: event.target.value
+      }
+      });
+      event.target.value = null;
+    };
+
+    handleSubmit = e => {
+      let data = new FormData();
+      let info = this.state.data;
+      for(let prop in info)
+      {
+        data.append(prop, info[prop]);
+      }
+      if(this.state.fileData !== -1)
+      {
+      let info = this.state.fileData;
+      for(let prop in info)
+      {
+        let link = prop + "Link";
+        if (this.state.fileData[link] != null && this.state.fileData[prop] != null) {
+          data.append(prop, this.state.fileData[prop]);
+        } else if (this.state.fileData[prop] == null && this.state.fileData[link] != null) {
+        } else if (this.state.fileData[prop] == null && this.state.fileData[link] == null) {
+          data.append(prop, "");
+        }
+      }
+    }
+    
+      let headers = {
+        "X-CSRFToken": getCookie("csrftoken"),
+        "Content-type": "multipart/form-data"
+      };
+      axios({
+        method: "post",
+        url: "/api/student_profile/" + url + "/",
+        data: data,
+        headers: headers
+      })
+        .then(response => {
+          this.props.appendData(response.data);
+          this.setState(initial, () => {
+            this.props.handleHide();
+          });
+        })
+        .catch(error => {
+          console.log(error);
+        });
+    };
+
+    handleUpdateDelete = option => {
+      let headers = {
+        "X-CSRFToken": getCookie("csrftoken")
+      };
+      axios({
+        method: option,
+        url: "/api/student_profile/" + url +"/" + this.state.data.id + "/",
+        data: this.state.data,
+        headers: headers
+      }).then(response => {
+        this.props.updateDeleteData(this.state.data, option);
+        this.setState(initial, () => {
+          this.props.handleHide();
+        });
+      });
+    };
+
+    handleChange = (name, value) => {
+      console.log('called');
+      if (this.state.data.hasOwnProperty(name)) {
+        console.log('yes');
+        this.setState({ data: { ...this.state.data, [name]: value } });
+      }
+    };
+
+    handleDelete = (name) => {
+      let link = name + "link";
+      this.setState({
+        fileData: {...this.state.fileData, [name]: null, [link]: null}
+      });
+    };
+    render() {
+      const {update} = this.state;
+      console.log('reached render');
+      let formElements = this.makeForm(info);
+      console.log(formElements);
+      return (
+        <Segment basic>
+          <Segment attached="top" styleName="style.headingBox">
+            <h3 styleName="style.heading">{name}</h3>
+            <Icon color="grey" name="delete" onClick={this.props.handleHide} />
+          </Segment>
+
+          <Segment attached styleName="style.formStyle">
+            <ErrorTransition errors={this.state.errors} />
+            <Form autoComplete="off">{formElements}</Form>
+            <Confirm
+              header="Delete"
+              open={this.state.open}
+              content="Are you sure you want to delete?"
+              onConfirm={() => this.handleUpdateDelete("delete")}
+              onCancel={() => {
+                this.setState({ open: false });
+              }}
+            />
+          </Segment>
+
+          {update ? (
+            <Segment attached="bottom" styleName="style.headingBox">
+              <div
+                styleName="style.delete"
+                onClick={() => {
+                  this.setState({ open: true });
+                }}
+              >
+                Delete
+              </div>
+              <Button onClick={() => this.handleUpdateDelete("put")} color="blue">
+                Save Changes
+              </Button>
+            </Segment>
+          ) : (
+            <Segment attached="bottom" styleName="style.buttonBox">
+              <Button onClick={() => this.handleSubmit()} color="blue" type="submit">
+                Submit
+              </Button>
+            </Segment>
+          )}
+        </Segment>
+      );
+    }
+  }
+  return Generic;
+}
+
+
+
+//provision to add a group form object using a different prop;
+//user props is currently wrong will be changed after testing
diff --git a/src/components/input_fields/boolean-field.js b/src/components/input_fields/boolean-field.js
new file mode 100644
index 0000000..23e85ef
--- /dev/null
+++ b/src/components/input_fields/boolean-field.js
@@ -0,0 +1,19 @@
+import React from "react";
+import { Checkbox } from "semantic-ui-react";
+
+import Field from "./field";
+
+export default class BooleanField extends React.PureComponent {
+  render() {
+    const { name, field, checked, handleChange, error } = this.props;
+    const { required, label } = field;
+    return (
+      <Field
+        field={<Checkbox id={name} name={name} checked={checked} onChange={(e, { name, checked }) => handleChange(name, checked)} toggle />}
+        label={label}
+        required={required}
+        error={error}
+      />
+    );
+  }
+}
diff --git a/src/components/input_fields/choice-field.js b/src/components/input_fields/choice-field.js
new file mode 100644
index 0000000..7a44381
--- /dev/null
+++ b/src/components/input_fields/choice-field.js
@@ -0,0 +1,31 @@
+import React from "react";
+import { Dropdown } from "semantic-ui-react";
+
+import Field from "./field";
+
+export default class BooleanField extends React.PureComponent {
+  render() {
+    const { name, field, value, handleChange, options, error } = this.props;
+    const { required, label } = field;
+    return (
+      <Field
+        field={
+          <Dropdown
+            id={name}
+            name={name}
+            placeholder={label}
+            value={value}
+            options={options}
+            onChange={(e, { name, value }) => handleChange(name, value)}
+            selection
+            search
+            fluid
+          />
+        }
+        label={label}
+        required={required}
+        error={error}
+      />
+    );
+  }
+}
diff --git a/src/components/input_fields/date-field.js b/src/components/input_fields/date-field.js
new file mode 100644
index 0000000..c45713a
--- /dev/null
+++ b/src/components/input_fields/date-field.js
@@ -0,0 +1,28 @@
+import React from "react";
+import { DateInput, Form } from "semantic-ui-calendar-react";
+
+export default class DateField extends React.PureComponent {
+  render() {
+    const { name, field, value, handleChange, error } = this.props;
+    const { required, label, maxLength } = field;
+    return (
+      <Form.Field required={required}>
+        <label>{label}</label>
+        <DateInput
+            id={name}
+            name={name}
+            placeholder={label}
+            value={value}
+            maxLength={maxLength}
+            onChange={(e, { name, value }) => {
+            e.persist();
+            handleChange(name, value);
+            }}
+            iconPosition="left"
+            error={error}
+          />
+       
+      </Form.Field>
+    );
+  }
+}
diff --git a/src/components/input_fields/decimal-field.js b/src/components/input_fields/decimal-field.js
new file mode 100644
index 0000000..496f444
--- /dev/null
+++ b/src/components/input_fields/decimal-field.js
@@ -0,0 +1,29 @@
+import React from "react";
+import { Form } from "semantic-ui-react";
+
+import Field from "./field";
+
+export default class DecimalField extends React.PureComponent {
+  render() {
+    const { name, field, value, handleChange, error } = this.props;
+    const { required, label } = field;
+    return (
+      <Field
+        field={
+          <Form.Input
+            type="number"
+            step="any"
+            id={name}
+            name={name}
+            placeholder={label}
+            value={value}
+            onChange={(e, { name, value }) => handleChange(name, value)}
+          />
+        }
+        label={label}
+        required={required}
+        error={error}
+      />
+    );
+  }
+}
diff --git a/src/components/input_fields/email-field.js b/src/components/input_fields/email-field.js
new file mode 100644
index 0000000..3e01e22
--- /dev/null
+++ b/src/components/input_fields/email-field.js
@@ -0,0 +1,29 @@
+import React from "react";
+import { Form } from "semantic-ui-react";
+
+import Field from "./field";
+
+export default class EmailField extends React.PureComponent {
+  render() {
+    const { name, field, value, handleChange, error } = this.props;
+    const { required, label, maxLength } = field;
+    return (
+      <Field
+        field={
+          <Form.Input
+            type="email"
+            id={name}
+            name={name}
+            placeholder={label}
+            value={value}
+            maxLength={maxLength}
+            onChange={(e, { name, value }) => handleChange(name, value)}
+          />
+        }
+        label={label}
+        required={required}
+        error={error}
+      />
+    );
+  }
+}
diff --git a/src/components/input_fields/field.js b/src/components/input_fields/field.js
new file mode 100644
index 0000000..10ec9b9
--- /dev/null
+++ b/src/components/input_fields/field.js
@@ -0,0 +1,18 @@
+import React from "react";
+import { Grid, Form } from "semantic-ui-react";
+
+export default class Field extends React.PureComponent {
+  render() {
+    const { name, field, error, label, required } = this.props;
+    return (
+      <React.Fragment>
+        <Grid.Row as={Form.Field} required={required} error={error}>
+          <Grid.Column width={4} as="label" htmlFor={name} verticalAlign="middle">
+            {label}
+          </Grid.Column>
+          <Grid.Column width={6}>{field}</Grid.Column>
+        </Grid.Row>
+      </React.Fragment>
+    );
+  }
+}
diff --git a/src/components/input_fields/fileField.js b/src/components/input_fields/fileField.js
new file mode 100644
index 0000000..d2c5054
--- /dev/null
+++ b/src/components/input_fields/fileField.js
@@ -0,0 +1,34 @@
+import React from "react";
+import {Form} from "semantic-ui-react";
+import {Resume} from "./../resume";
+import style from "./../../styles.css";
+
+export default class FileField extends React.PureComponent {
+  render() {
+    const { name,  handleFile,  required, label, link, handleDelete } = this.props;
+
+    let res = (
+        <Form.Field required={required}>
+          <input type="file" onChange={(e, { name, value }) => {
+            e.persist();
+            handleFile(e, name, value)}}
+          styleName="style.inputfile" 
+          id="embedpollfileinput1" />
+          <div styleName="style.inputLabel">
+            <label htmlFor="embedpollfileinput1" className="ui blue button">
+              <i className="ui upload icon" />
+              Upload {label}
+            </label>
+          </div>
+        </Form.Field>
+      );
+    if (link) {
+        res = (
+          <Form.Field>
+            <Resume resume={link} handleDelete={() => handleDelete(name)} />
+          </Form.Field>
+        );
+      }
+    return res;
+  }
+}
diff --git a/src/components/input_fields/index.js b/src/components/input_fields/index.js
new file mode 100644
index 0000000..bf81b1f
--- /dev/null
+++ b/src/components/input_fields/index.js
@@ -0,0 +1,147 @@
+import React from 'react'
+
+import BooleanField from './boolean-field'
+import ChoiceField from './choice-field'
+import DateField from './date-field'
+import DecimalField from './decimal-field'
+import EmailField from './email-field'
+import IntegerField from './integer-field'
+import NoField from './no-field'
+import ReadField from './read-field'
+import TextAreaField from './textarea-field'
+import TextField from './text-field'
+
+export default class InputField extends React.PureComponent {
+  renderField = () => {
+    const { field, name, handleChange, value, error } = this.props
+    const { type, maxLength, minValue, maxValue, readOnly } = field
+    if (readOnly) {
+      return (
+        // Read only field
+        <ReadField
+          field={field}
+          name={name}
+          handleChange={handleChange}
+          value={value}
+          error={error}
+        />
+      )
+    }
+    switch (type) {
+      case 'string':
+        if (maxLength) {
+          // Input type text
+          return (
+            <TextField
+              field={field}
+              name={name}
+              handleChange={handleChange}
+              value={value}
+              error={error}
+            />
+          )
+        } else {
+          // Input type textarea
+          return (
+            <TextAreaField
+              field={field}
+              name={name}
+              handleChange={handleChange}
+              value={value}
+              error={error}
+            />
+          )
+        }
+      case 'email':
+        // Input type email
+        return (
+          <EmailField
+            field={field}
+            name={name}
+            handleChange={handleChange}
+            value={value}
+            error={error}
+          />
+        )
+      case 'boolean':
+        // Input type checkbox
+        return (
+          <BooleanField
+            field={field}
+            name={name}
+            handleChange={handleChange}
+            checked={value}
+            error={error}
+          />
+        )
+      case 'integer':
+        // Input type number
+        return (
+          <IntegerField
+            field={field}
+            name={name}
+            handleChange={handleChange}
+            value={value}
+            minValue={minValue}
+            maxValue={maxValue}
+            error={error}
+          />
+        )
+      case 'decimal':
+        // Input type number with step equals to any
+        return (
+          <DecimalField
+            field={field}
+            name={name}
+            handleChange={handleChange}
+            value={value}
+            error={error}
+          />
+        )
+      case 'choice':
+        // Input type options
+        return (
+          <ChoiceField
+            field={field}
+            name={name}
+            handleChange={handleChange}
+            value={value}
+            options={field.choices.map(choice => {
+              return {
+                key: choice.value,
+                value: choice.value,
+                text: choice.displayName
+              }
+            })}
+            error={error}
+          />
+        )
+
+      case 'date':
+        // Input type date
+        return (
+          <DateField
+            field={field}
+            name={name}
+            handleChange={handleChange}
+            value={value}
+            error={error}
+          />
+        )
+      default:
+        // Default no support field
+        return (
+          <NoField
+            field={field}
+            name={name}
+            handleChange={handleChange}
+            value={value}
+            error={error}
+          />
+        )
+    }
+  }
+  render () {
+    return this.renderField()
+  }
+}
diff --git a/src/components/input_fields/integer-field.js b/src/components/input_fields/integer-field.js
new file mode 100644
index 0000000..727a6ef
--- /dev/null
+++ b/src/components/input_fields/integer-field.js
@@ -0,0 +1,30 @@
+import React from 'react'
+import { Form } from 'semantic-ui-react'
+
+import Field from './field'
+
+export default class IntegerField extends React.PureComponent {
+  render () {
+    const { name, field, value, handleChange, error } = this.props
+    const { required, label, maxValue, minValue } = field
+    return (
+      <Field
+        field={
+          <Form.Input
+            type='number'
+            id={name}
+            name={name}
+            placeholder={label}
+            value={value}
+            maxvalue={maxValue}
+            minvalue={minValue}
+            onChange={(e, { name, value }) => handleChange(name, value)}
+          />
+        }
+        label={label}
+        required={required}
+        error={error}
+      />
+    )
+  }
+}
diff --git a/src/components/input_fields/no-field.js b/src/components/input_fields/no-field.js
new file mode 100644
index 0000000..69670d9
--- /dev/null
+++ b/src/components/input_fields/no-field.js
@@ -0,0 +1,24 @@
+import React from 'react'
+import { Grid, Form, Segment } from 'semantic-ui-react'
+
+export default class InputField extends React.PureComponent {
+  render () {
+    const { field } = this.props
+    const { type } = field
+    return (
+      <React.Fragment>
+        <Grid.Row as={Form.Field}>
+          <Grid.Column width={10}>
+            <Segment>
+              The field type{' '}
+              <strong>
+                <code>{type}</code>
+              </strong>{' '}
+              is not supported at this stage of development.
+            </Segment>
+          </Grid.Column>
+        </Grid.Row>
+      </React.Fragment>
+    )
+  }
+}
diff --git a/src/components/input_fields/read-field.js b/src/components/input_fields/read-field.js
new file mode 100644
index 0000000..fde10e6
--- /dev/null
+++ b/src/components/input_fields/read-field.js
@@ -0,0 +1,11 @@
+import React from 'react'
+
+import Field from './field'
+
+export default class ReadField extends React.PureComponent {
+  render () {
+    const { field, value } = this.props
+    const { required, label } = field
+    return <Field label={label} field={value} required={required} />
+  }
+}
diff --git a/src/components/input_fields/text-field.js b/src/components/input_fields/text-field.js
new file mode 100644
index 0000000..8e2db04
--- /dev/null
+++ b/src/components/input_fields/text-field.js
@@ -0,0 +1,25 @@
+import React from "react";
+import { Form, Input } from "semantic-ui-react";
+
+export default class TextField extends React.PureComponent {
+  render() {
+    const { name, value, handleChange, required, label, placeholder } = this.props;
+    return (
+      <Form.Field required={required}>
+        <label>{label}</label>
+        <Input
+          id={name}
+          onChange={(e, { name, value }) => {
+            e.persist();
+            handleChange(name, value)}}
+          value={value}
+          name={name}
+          placeholder={placeholder}
+        />
+      </Form.Field>
+    );
+  }
+}
+
+
+//error needs to be added
\ No newline at end of file
diff --git a/src/components/input_fields/textarea-field.js b/src/components/input_fields/textarea-field.js
new file mode 100644
index 0000000..501b9f3
--- /dev/null
+++ b/src/components/input_fields/textarea-field.js
@@ -0,0 +1,29 @@
+import React from 'react'
+import { Form } from 'semantic-ui-react'
+
+import Field from './field'
+
+export default class TextAreaField extends React.PureComponent {
+  render () {
+    const { name, field, value, handleChange, error } = this.props
+    const { required, label } = field
+    return (
+      <Field
+        field={
+          <Form.TextArea
+            id={name}
+            name={name}
+            placeholder={label}
+            value={value}
+            onChange={e => handleChange(e.target.name, e.target.value)}
+            autoHeight
+            rows={2}
+          />
+        }
+        label={label}
+        required={required}
+        error={error}
+      />
+    )
+  }
+}
diff --git a/src/components/input_fields/year-field.js b/src/components/input_fields/year-field.js
new file mode 100644
index 0000000..4ac7158
--- /dev/null
+++ b/src/components/input_fields/year-field.js
@@ -0,0 +1,24 @@
+import React from "react";
+import { Form} from "semantic-ui-react";
+import { YearInput } from "semantic-ui-calendar-react";
+
+export default class YearField extends React.PureComponent {
+  render() {
+    const { name, value, handleChange, required, label, placeholder } = this.props;
+    return (
+      <Form.Field required={required}>
+        <label>{label}</label>
+        <YearInput
+              name={name}
+              placeholder={placeholder}
+              value={value}
+              iconPosition="left"
+              onChange={(e, { name, value }) => {
+                e.persist();
+                handleChange(name, value)}
+              }
+        />
+      </Form.Field>
+    );
+  }
+}
diff --git a/src/components/jobForm.js b/src/components/jobForm.js
index b759ccd..225ffbc 100644
--- a/src/components/jobForm.js
+++ b/src/components/jobForm.js
@@ -55,7 +55,7 @@ export class JobForm extends React.Component {
     } else if (this.props != nextProps && nextProps.update == false) {
       this.setState(initial);
     }
-  }
+  } //should be removed?
   handleChange = (event, { name = undefined, value }) => {
     event.persist();
     if (this.state.data.hasOwnProperty(name)) {
@@ -186,12 +186,7 @@ export class JobForm extends React.Component {
             </Form.Field>
             <Form.Field>
               <label>Description</label>
-              <Form.TextArea
-                onChange={this.handleChange}
-                value={description}
-                name="description"
-                placeholder="Description"
-              />
+              <Form.TextArea onChange={this.handleChange} value={description} name="description" placeholder="Description" />
             </Form.Field>
           </Form>
           <Confirm
diff --git a/src/components/profile.js b/src/components/profile.js
index c5156e2..3822ee8 100644
--- a/src/components/profile.js
+++ b/src/components/profile.js
@@ -7,8 +7,6 @@ import { ProfileForm } from "./profileForm";
 import { ResumeDownload } from "./resumeDownload";
 import { BrowserView, MobileView } from "react-device-detect";
 import style from "../styles.css";
-import defaultDp from "./../../../../../omniport/formula_one/src/components/default-dp";
-import DefaultDp from "./../../../../../omniport/formula_one/src/components/default-dp";
 export class Profile extends React.Component {
   constructor(props) {
     super(props);
@@ -20,7 +18,7 @@ export class Profile extends React.Component {
         customWebsite: false,
         resume: null,
         displayPicture: null,
-        theme: "teal"
+        theme: "blue"
       },
       person_data: "",
       active: false,
@@ -107,7 +105,7 @@ export class Profile extends React.Component {
     };
     let imageView = <Image centered src={person_data.displayPicture} size="small" circular />;
     if (person_data.displayPicture == null && data.student != "") {
-      imageView = <DefaultDp name={data.student} size={1} />;
+      imageView = null; //<DefaultDp name={data.student} size={1} />
     }
     if (data)
       return (
diff --git a/student_profile b/student_profile
new file mode 160000
index 0000000..91f2c21
--- /dev/null
+++ b/student_profile
@@ -0,0 +1 @@
+Subproject commit 91f2c21ff8df20934bc6d5a6e040a9e20ebe6adf

